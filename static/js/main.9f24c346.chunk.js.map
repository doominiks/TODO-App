{"version":3,"sources":["components/Button/Button.js","components/TasksList/TasksList.js","components/ToDoApp/ToDoApp.js","registerServiceWorker.js","index.js"],"names":["Button","props","click","name","gradient","react_default","a","createElement","Fragment","mdbreact_esm","onClick","outline","color","TasksList","tasks","items","map","item","key","id","text","ToDoApp","state","handleAddTask","Object","toConsumableArray","_this","push","concat","length","setState","handleRemoveTask","pop","handleClearTasks","this","className","components_Button_Button","components_TasksList_TasksList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","components_ToDoApp_ToDoApp","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qPAceA,EAVA,SAAAC,GAAS,IACZC,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,KAAmBF,EAAbG,SAErB,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,QAASR,EAAOS,SAAO,EAACC,MAAM,QAAQT,KCO3CU,UAbG,SAAAZ,GAAS,IAEjBa,EADYb,EAAVc,MACYC,IAAI,SAAAC,GAAI,OACxBZ,EAAAC,EAAAC,cAAA,MAAIW,IAAKD,EAAKE,IACTF,EAAKG,QAEd,OACIf,EAAAC,EAAAC,cAAA,UACKO,KC6CEO,6MAjDXC,MAAQ,CACJR,MAAO,MAGXS,cAAgB,WACZ,IAAMT,EAAKU,OAAAC,EAAA,EAAAD,CAAOE,EAAKJ,MAAMR,OAC7BA,EAAMa,KAAK,CACPP,KAAI,eAAAQ,OAAiBd,EAAMe,OAAS,GACpCV,GAAIL,EAAMe,SAGdH,EAAKI,SAAS,CACVhB,aAMRiB,iBAAmB,WACf,IAAMjB,EAAKU,OAAAC,EAAA,EAAAD,CAAOE,EAAKJ,MAAMR,OAC7BA,EAAMkB,MAENN,EAAKI,SAAS,CACVhB,aAKRmB,iBAAmB,WACfP,EAAKI,SAAS,CACVhB,MAAO,8EAMN,IACGA,EAAUoB,KAAKZ,MAAfR,MACR,OACIT,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,aACX9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAQlC,MAAOgC,KAAKX,cAAepB,KAAM,MAAOC,SAAU,UAC1DC,EAAAC,EAAAC,cAAC6B,EAAD,CAAQlC,MAAOgC,KAAKH,iBAAkB5B,KAAM,SAAUC,SAAU,SAChEC,EAAAC,EAAAC,cAAC6B,EAAD,CAAQlC,MAAOgC,KAAKD,iBAAkB9B,KAAM,QAASC,SAAU,SAC9DU,EAAMe,OAAS,EAAIxB,EAAAC,EAAAC,cAAC8B,EAAD,CAAWtB,MAAOD,IAAY,aA7C5CwB,aCKhBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/B,QACfyB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC5DjEC,IAASC,OAAQzD,EAAAC,EAAAC,cAAEwD,EAAF,MAAgBC,SAASC,eAAe,SDU1C,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,YAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAlB,OAAMuC,YAAN,sBAEN5B,EAwCX,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAqB,CAAwBjC,GAHxBD,EAAgBC,MCxBxBkC","file":"static/js/main.9f24c346.chunk.js","sourcesContent":["import React from 'react';\nimport { MDBBtn } from \"mdbreact\";\n\n\nconst Button = props => {\n    const { click, name, gradient } = props\n\n    return (\n        <>\n            <MDBBtn onClick={click} outline color=\"dark\">{name}</MDBBtn>\n        </>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport './TasksList.css';\n\nconst TasksList = props => {\n    const { items } = props\n    const tasks = items.map(item =>\n        <li key={item.id}>\n            {item.text}\n        </li>)\n    return (\n        <ul>\n            {tasks}\n        </ul>\n    );\n}\n\nexport default TasksList;","import React, { Component } from 'react';\nimport './ToDoApp.css';\nimport Button from '../Button';\nimport TasksList from '../TasksList';\n\nclass ToDoApp extends Component {\n\n    state = {\n        tasks: [],\n    }\n\n    handleAddTask = () => {\n        const tasks = [...this.state.tasks];\n        tasks.push({\n            text: `Task number ${tasks.length + 1}`,\n            id: tasks.length\n        })\n\n        this.setState({\n            tasks,\n\n        })\n\n    }\n\n    handleRemoveTask = () => {\n        const tasks = [...this.state.tasks]\n        tasks.pop()\n\n        this.setState({\n            tasks,\n\n        })\n    }\n\n    handleClearTasks = () => {\n        this.setState({\n            tasks: [],\n\n        })\n\n    }\n\n    render() {\n        const { tasks } = this.state\n        return (\n            <div className=\"container\" >\n                <Button click={this.handleAddTask} name={'Add'} gradient={'peach'} />\n                <Button click={this.handleRemoveTask} name={'Remove'} gradient={'aqua'} />\n                <Button click={this.handleClearTasks} name={'Clear'} gradient={'blue'} />\n                {tasks.length > 0 ? <TasksList items={tasks} /> : null}\n            </div>\n        )\n    }\n}\n\nexport default ToDoApp;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport ToDoApp from './components/ToDoApp';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( < ToDoApp / > , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}